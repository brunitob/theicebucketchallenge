<div style="text-align:center;">
	<div class="text-center top">
		<span class="header">The<span>
		<span class="header-blue">ice<span>
		<span class="header">bucket<span><br>
		<span class="header-big">challenge<span> 
	</div>
	<div class="marke">Who challenged <span id="changer" class="changer">Messi</span> ?</div>
	<div class="menu">
		<div class="btn-group btn-group-justified">
		  <div class="btn-group">
		    <a href="https://twitter.com/search?q=%23TheIceBucketChallenge&src=tyah" target="_blank"><button type="button"  class="btn btn-default btn-custom">#IceBucketChallenge</button></a>
		  </div>
		  <div class="btn-group">
		    <a href="http://www.alsa.org/about-als/what-is-als.html" target="_blank"><button type="button" class="btn btn-default btn-custom">What is ALS?</button></a>
		  </div>
		  <div class="btn-group">
		    <a href="mailto:hello@theicebucketchallenge.info"><button type="button" class="btn btn-default btn-custom">Add more Stars!</button></a>
		  </div>
		</div>

	</div>
<script src="http://d3js.org/d3.v3.min.js"></script>
<script>

var diameter = 960,
    radius = diameter / 2,
    innerRadius = radius - 120;

var cluster = d3.layout.cluster()
    .size([360, innerRadius])
    .sort(null)
    .value(function(d) { return d.size; });

var bundle = d3.layout.bundle();

var line = d3.svg.line.radial()
    .interpolate("bundle")
    .tension(.85)
    .radius(function(d) { return d.y; })
    .angle(function(d) { return d.x / 180 * Math.PI; });

var svg = d3.select("body").append("svg")
    .attr("width", diameter)
    .attr("height", diameter)
  .append("g")
    .attr("transform", "translate(" + radius + "," + radius + ")");

var link = svg.append("g").selectAll(".link"),
    node = svg.append("g").selectAll(".node");

d3.json("readme-flare-imports.json", function(error, classes) {
  var nodes = cluster.nodes(packageHierarchy(classes)),
      links = packageImports(nodes);

  link = link
      .data(bundle(links))
    .enter().append("path")
      .each(function(d) { d.source = d[0], d.target = d[d.length - 1]; })
      .attr("class", "link")
      .attr("d", line);

  node = node
      .data(nodes.filter(function(n) { return !n.children; }))
    .enter().append("text")
      .attr("class", "node")
      .attr("dy", ".31em")
      .attr("transform", function(d) { return "rotate(" + (d.x - 90) + ")translate(" + (d.y + 8) + ",0)" + (d.x < 180 ? "" : "rotate(180)"); })
      .style("text-anchor", function(d) { return d.x < 180 ? "start" : "end"; })
      .text(function(d) { return d.key; })
      .on("mouseover", mouseovered)
      .on("mouseout", mouseouted);
});

function mouseovered(d) {
  node
      .each(function(n) { n.target = n.source = false; });

  link
      .classed("link--target", function(l) { if (l.target === d) return l.source.source = true; })
      .classed("link--source", function(l) { if (l.source === d) return l.target.target = true; })
    .filter(function(l) { return l.target === d || l.source === d; })
      .each(function() { this.parentNode.appendChild(this); });

  node
      .classed("node--target", function(n) { return n.target; })
      .classed("node--source", function(n) { return n.source; });
}

function mouseouted(d) {
  link
      .classed("link--target", false)
      .classed("link--source", false);

  node
      .classed("node--target", false)
      .classed("node--source", false);
}

d3.select(self.frameElement).style("height", diameter + "px");

// Lazily construct the package hierarchy from class names.
function packageHierarchy(classes) {
  var map = {};

  function find(name, data) {
    var node = map[name], i;
    if (!node) {
      node = map[name] = data || {name: name, children: []};
      if (name.length) {
        node.parent = find(name.substring(0, i = name.lastIndexOf(".")));
        node.parent.children.push(node);
        node.key = name.substring(i + 1);
      }
    }
    return node;
  }

  classes.forEach(function(d) {
    find(d.name, d);
  });

  return map[""];
}

// Return a list of imports for the given array of nodes.
function packageImports(nodes) {
  var map = {},
      imports = [];

  // Compute a map from name to node.
  nodes.forEach(function(d) {
    map[d.name] = d;
  });

  // For each import, construct a link from the source to target node.
  nodes.forEach(function(d) {
    if (d.imports) d.imports.forEach(function(i) {
      imports.push({source: map[d.name], target: map[i]});
    });
  });

  return imports;
}

</script>
</div>

<div style="text-align:center;">
<div class="fb-comments" data-href="http://theicebucketchallenge.herokuapp.com/" data-width="700" data-numposts="10" data-colorscheme="light"></div>
</div>
<div class="text-center">
<script type="text/javascript">
  ( function() {
    if (window.CHITIKA === undefined) { window.CHITIKA = { 'units' : [] }; };
    var unit = {"calltype":"async[2]","publisher":"brunitob","width":728,"height":90,"sid":"Chitika Default","color_site_link":"407dd8"};
    var placement_id = window.CHITIKA.units.length;
    window.CHITIKA.units.push(unit);
    document.write('<div id="chitikaAdBlock-' + placement_id + '"></div>');
}());
</script>
<script type="text/javascript" src="//cdn.chitika.net/getads.js" async></script>
</div>
<div class="text-center">
<script type="text/javascript">
  ( function() {
    if (window.CHITIKA === undefined) { window.CHITIKA = { 'units' : [] }; };
    var unit = {"calltype":"async[2]","publisher":"brunitob","width":550,"height":250,"sid":"Chitika Default","color_site_link":"407dd8"};
    var placement_id = window.CHITIKA.units.length;
    window.CHITIKA.units.push(unit);
    document.write('<div id="chitikaAdBlock-' + placement_id + '"></div>');
}());
</script>
<script type="text/javascript" src="//cdn.chitika.net/getads.js" async></script>
</div>
<div class="footer">
      <div class="container text-center">
        With <span class="glyphicon glyphicon-heart"></span> from Buenos Aires. | Write me: <a href="mailto:hello@theicebucketchallenge.info">hello@theicebucketchallenge.info</a>
      </div>
</div>
<script>
var words = ["Messi","Adam Levine","Bill Gates","Jennifer Lopez", "Cristiano Ronaldo","Robert Downey Jr","James Franco", "Taylor Swift","Justin Timberlake","Chris Martin","Gwyneth Paltrow","Hugh Jackman", "Rooney Mara","Garrett Hedlund", "Russell Crowe","Kate Upton","Justin Verlander","Anna Kendrick", "Garth Brooks", "James Franco", "Ben Affleck","Chris Pratt","Oprah Winfrey", "Jennifer Lopez", "adam Levine","Hoda Kotb"];
var i = 0;
var text = "Messi";
function _getChangedText() {
    i = (i + 1) % words.length;
    console.log(words[i]);
    console.log(i);
    return text.replace(/Messi/, words[i]);
}
function _changeText() {
    var txt = _getChangedText();
    console.log(txt);
    document.getElementById("changer").innerHTML = txt;
}
setInterval("_changeText()", 1000);
</script>


